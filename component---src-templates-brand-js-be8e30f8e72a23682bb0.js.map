{"version":3,"sources":["webpack:///./src/components/brandComponents/HeroSide.js","webpack:///./src/components/brandComponents/Hero.js","webpack:///./src/components/brandComponents/ItemSlider.js","webpack:///./src/components/brandComponents/Features.js","webpack:///./src/templates/Brand.js"],"names":["HeroSide","data","bgImages","backgroundImages","innerImage","heroInnerImage","overlay","colorOverlay","overlayValue","colorOverlayPercentage","gradientColor","colorOverlayValue","isH1","h1Heading","title","heading","subtext","buttons","componentHeight","sectionHeight","primaryLink","buttonLink","secondaryLink","isPrimaryInternal","isInternal","isSecondaryInternal","hasImage","h2Breakpoints","useBreakpointValue","base","md","lg","h3Breakpoints","h4Breakpoints","cardDirection","direction","w","position","overflow","h","flexDirection","alignItems","justifyContent","minHeight","minWidth","top","left","zIndex","style","objectFit","imgStyle","loading","className","image","getImage","localFile","alt","height","bgGradient","bgColor","justify","width","pt","pb","order","maxW","maxH","px","rounded","borderBottomRadius","mx","boxShadow","py","align","spacing","minH","right","mt","as","color","fontWeight","lineHeight","textAlign","fontSize","GatsbyLink","to","href","target","bg","size","_hover","buttonLabel","variant","colorScheme","border","Hero","h1Breakpoints","background","ArrowStyles","props","onClick","_before","display","ItemSlider","imageSections","imageSection","sectionTitle","subtitle","sectionSubtext","numberOfSlides","numberOfItemsToShow","settings","dots","infinite","speed","slidesToShow","slidesToScroll","initialSlide","swipeToSlide","nextArrow","prevArrow","slide","responsive","breakpoint","console","log","map","section","i","link","isLinkInternal","key","p","my","padding","altText","mb","Features","features","feature","alignContent","jus","flex","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","insetY","fontFamily","sectionPretext","columns","Object","keys","length","feat","featureTitle","maxWidth","featureSubtext","split","text","index","borderColor","StatsText","children","Brand","brandComponents","wpBrand","pageComponents","Layout","post","component","typeName","__typename","id","heroType"],"mappings":"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","file":"component---src-templates-brand-js-be8e30f8e72a23682bb0.js","sourcesContent":["import React from \"react\"\nimport {\n    Stack,\n    Flex,\n    Button,\n    Text,\n    VStack,\n    useBreakpointValue,\n    Heading,\n    Box,\n  } from '@chakra-ui/react'\n  import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n  import { graphql, Link as GatsbyLink } from 'gatsby'\n  import { isInternal } from \"../../utils\"\n  \n  \n  export const fragment = graphql`\n  fragment HeroSide on WpBrand_Pagecomponents_PageComponents_HeroComponent {\n          colorOverlay\n          colorOverlayPercentage\n          colorOverlayValue\n          h1Heading\n          heading\n          subtext\n          sectionHeight\n          direction\n          heroType\n          fieldGroupName\n          buttons {\n            buttonIconClass\n            buttonLabel\n            buttonLink\n          }\n          backgroundImages {\n            fieldGroupName\n            image {\n              altText\n              id\n              link\n              sourceUrl\n              localFile {\n                childImageSharp {\n                  gatsbyImageData(layout: FULL_WIDTH, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n                }\n              }\n            }\n          }\n          heroInnerImage {\n              altText\n              id\n              link\n              sourceUrl\n              localFile {\n                childImageSharp {\n                  gatsbyImageData(layout: FULL_WIDTH, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n                }\n              }\n          }\n        }\n`\n\n\n  const HeroSide = (data) => {\n    const bgImages = data.backgroundImages\n    const innerImage = data.heroInnerImage\n    const overlay = data.colorOverlay\n    const overlayValue = data.colorOverlayPercentage\n    const overlayColor = data.colorOverlayValue\n    const gradientColor = overlayColor+overlayValue\n    const isH1 = data.h1Heading\n    const title = data.heading\n    const subtext = data.subtext\n    const buttons = data.buttons\n    const componentHeight = data.sectionHeight\n    const primaryLink = buttons[0].buttonLink\n    const secondaryLink = buttons[1]?.buttonLink\n    const isPrimaryInternal = isInternal(primaryLink)\n    const isSecondaryInternal = isInternal(secondaryLink)\n    const hasImage = bgImages\n    const h1Breakpoints = useBreakpointValue({ base: '3xl', md: '5xl', lg: '7xl' })\n    const h2Breakpoints = useBreakpointValue({ base: '2xl', md: '4xl', lg: '6xl' })\n    const h3Breakpoints = useBreakpointValue({ base: 'xl', md: '2xl', lg: '3xl' })\n    const h4Breakpoints = useBreakpointValue({ base: 'l', md: 'xl', lg: 'xl' })\n    const cardDirection = data.direction\n    return (\n      <Stack\n        w={'full'}\n        position=\"relative\"\n        overflow=\"hidden\"\n        h={['auto','auto',componentHeight,componentHeight]}\n        flexDirection={[\"column\",\"column\",\"row\",\"row\"]}\n        alignItems={'flex-end'}\n        justifyContent={cardDirection}>\n          {hasImage && (\n            <Box\n            minHeight={componentHeight}\n            minWidth=\"100vw\"\n            position=\"absolute\"\n            top=\"0\"\n            left=\"0\"\n            zIndex=\"-2\"\n            >\n            \n            <GatsbyImage style={{minHeight: componentHeight , objectFit: 'contain', overflow: 'visible', position: 'relative'}} imgStyle={{minHeight: componentHeight}} loading=\"eager\" className=\"hero-bg\" image={getImage(bgImages[0].image.localFile)} alt={title} />\n            </Box>\n          )}\n\n          <VStack \n            w={'full'}\n            height=\"100%\"\n            position=\"absolute\"\n            zIndex=\"-1\"\n            bgGradient={overlay ? 'linear(to-b, '+gradientColor+' , transparent)' : 'linear(to-b, transparent , transparent)'}\n            bgColor={overlay ? gradientColor : 'white'}>      \n          </VStack>\n          <Flex\n          justify={'center'}\n          width={[\"100%\",\"100%\",\"100%\",\"100%\"]}\n          pt={[\"25%\",\"12%\",\"0\",\"0%\"]}\n          pb={[\"20%\",\"8%\",\"0\",\"0%\"]}\n          height=\"100%\"\n          alignItems={'center'}\n          order={cardDirection == 'flex-start' ? 2 : 1}\n          >\n            <GatsbyImage style={{height: 'auto' , width: '50%', overflow: 'visible', position: 'relative'}}  loading=\"eager\"  image={getImage(innerImage.localFile)} alt={title} />\n          </Flex>\n        <VStack\n          width=\"100%\"\n          maxW={[\"100vw\",\"100vw\",\"50vw\",\"50vw\"]}\n          maxH=\"100%\"\n          justify={'center'}\n          px={['2','2','2','0']}\n          rounded={'md'}\n          borderBottomRadius=\"0\"\n          bgColor={[\"white\",\"white\",\"white\",\"white\"]}\n          mx={['0px !important','0px !important','0px !important','32px !important']}\n          boxShadow={'xl'}\n          order={cardDirection == 'flex-start' ? 1 : 2}\n          >\n          \n          <Stack py={[12,12,16,16]} position=\"relative\" align={'flex-start'}  spacing={4}>\n            <Box\n            width=\"100%\"\n            minH=\"100%\"\n            bgColor=\"#ffffff50\"\n            zIndex=\"-1\"\n            rounded={'md'}\n            left={cardDirection === 'flex-end' ? ['-10%','-15%','-9%','-9.5%'] : 'auto'}\n            right={cardDirection === 'flex-start' ? ['-10%','-15%','-9%','-9.5%'] : 'auto'}\n            top={['-8%','-10%','-16%','-16%']}\n            position=\"absolute\"\n            />\n            <Heading\n            px={'12'}\n            pb={'4'}\n            mt={'0px !important'}\n            as={isH1 ? 'h1' : 'h2'}\n              color={!hasImage ? 'white' : '#2f2f2f'}\n              fontWeight={900}\n              lineHeight={1.2}\n              textAlign='left'\n              fontSize={isH1 ? h2Breakpoints : h3Breakpoints}>\n              {title}\n            </Heading>\n            <Text\n              px={'12'}\n              pb={'6'}\n              mt={'0px !important'}\n              as = \"h3\"\n              color={!hasImage ? 'white' : '#2f2f2f'}\n              fontWeight={700}\n              lineHeight={1.5}\n              textAlign='left'\n              fontSize={h4Breakpoints}>\n              {subtext}\n            </Text>\n            \n            <Stack px={'12'} alignItems={'flex-start'} width=\"100%\" spacing={8} direction={'row'}>\n              <Button\n                as={isPrimaryInternal ? GatsbyLink : \"a\"}\n                to={primaryLink}\n                href={primaryLink}\n                target={isPrimaryInternal ? \"_self\" : \"_blank\"}\n                bg={'#e55424'}\n                rounded={'xl'}\n                color={'white'}\n                size={\"lg\"}\n                _hover={{ bg: 'gray.900' }}>\n                {buttons[0].buttonLabel}\n              </Button>\n              {buttons[1] && (<Button\n                as={isSecondaryInternal ? GatsbyLink : \"a\"}\n                to={secondaryLink}\n                href={secondaryLink}\n                target={isSecondaryInternal ? \"_self\" : \"_blank\"}\n                rounded={'xl'}\n                variant=\"outline\"\n                colorScheme=\"orange\"\n                size={\"lg\"}\n                _hover={{ bg: 'gray.900', color: 'white', border: '1px solid' }}\n                >\n                {buttons[1].buttonLabel}\n              </Button>)}\n            </Stack>\n            \n          </Stack>\n        </VStack>\n        \n      </Stack>\n    );\n  }\n\n  export default HeroSide","import React from \"react\"\nimport {\n    Stack,\n    Flex,\n    Button,\n    Text,\n    VStack,\n    useBreakpointValue,\n    Heading,\n    Box,\n  } from '@chakra-ui/react'\n  import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n  import { graphql, Link as GatsbyLink } from 'gatsby'\n  import { isInternal } from \"../../utils\"\n  \n  \n  export const fragment = graphql`\n  fragment HeroComponentBrand on WpBrand_Pagecomponents_PageComponents_HeroComponent {\n          colorOverlay\n          colorOverlayPercentage\n          colorOverlayValue\n          h1Heading\n          heading\n          subtext\n          sectionHeight\n          fieldGroupName\n          buttons {\n            buttonIconClass\n            buttonLabel\n            buttonLink\n          }\n          backgroundImages {\n            fieldGroupName\n            image {\n              altText\n              id\n              link\n              sourceUrl\n              localFile {\n                childImageSharp {\n                  gatsbyImageData(layout: FULL_WIDTH, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n                }\n              }\n            }\n          }\n        }\n`;\n\n\n  const Hero = (data) => {\n    const bgImages = data.backgroundImages\n    const overlay = data.colorOverlay\n    const overlayValue = data.colorOverlayPercentage\n    const overlayColor = data.colorOverlayValue\n    const gradientColor = overlayColor+overlayValue\n    const isH1 = data.h1Heading\n    const title = data.heading\n    const subtext = data.subtext\n    const buttons = data.buttons\n    const componentHeight = data.sectionHeight\n    const primaryLink = buttons[0].buttonLink\n    const secondaryLink = buttons[1]?.buttonLink\n    const isPrimaryInternal = isInternal(primaryLink)\n    const isSecondaryInternal = isInternal(secondaryLink)\n    const hasImage = bgImages\n    const h1Breakpoints = useBreakpointValue({ base: '3xl', md: '5xl', lg: '7xl' })\n    const h2Breakpoints = useBreakpointValue({ base: '2xl', md: '4xl', lg: '6xl' })\n    const h3Breakpoints = useBreakpointValue({ base: 'xl', md: '2xl', lg: '3xl' })\n    const h4Breakpoints = useBreakpointValue({ base: 'l', md: 'xl', lg: 'xl' })\n\n    return (\n      <Flex\n        w={'full'}\n        position=\"relative\"\n        overflow=\"hidden\"\n        h={['auto','auto',componentHeight,componentHeight]}>\n          {hasImage && (\n            <Box\n            minHeight=\"100vh\"\n            minWidth=\"100vw\"\n            position=\"absolute\"\n            top=\"0\"\n            left=\"0\"\n            zIndex=\"-1\"\n            height=\"100%\"\n            >\n            \n            <GatsbyImage style={{minHeight: componentHeight , height: \"100%\", overflow: 'visible', position: 'relative'}} imgStyle={{minHeight: componentHeight}} loading=\"eager\" className=\"hero-bg\" image={getImage(bgImages[0].image.localFile)} alt={title} />\n            </Box>\n          )}\n        \n        \n        <VStack\n          w={'full'}\n          justify={'center'}\n          px={['2','2','2','0']}\n          bgGradient={overlay ? 'linear(to-b, '+gradientColor+' , transparent)' : 'linear(to-b, transparent , transparent)'}\n          bgColor={overlay ? gradientColor : 'white'}>\n          \n          <Stack maxW={'6xl'} align={['flex-start', 'flex-start','center','center']} py={[12,12,16,16]} spacing={4}>\n            <Heading\n            as={isH1 ? 'h1' : 'h2'}\n              color={hasImage ? 'white' : '#1a1a1a'}\n              fontWeight={700}\n              lineHeight={1.2}\n              px={'12'}\n              pb={'4'}\n              mt={'0px !important'}\n              textAlign={['left,', 'left','center','center']}\n              fontSize={isH1 ? h1Breakpoints : h2Breakpoints}>\n              {title}\n            </Heading>\n            <Text\n              px={'12'}\n              pb={'6'}\n              mt={'0px !important'}\n              as = \"h3\"\n              color={hasImage ? 'white' : '#1a1a1a'}\n              fontWeight={700}\n              lineHeight={1.2}\n              textAlign={['left,', 'left','center','center']}\n              fontSize={h4Breakpoints}>\n              {subtext}\n            </Text>\n            \n            <Stack px={'12'} spacing={8} direction={['column','column','row','row']}>\n              <Button\n                as={isPrimaryInternal ? GatsbyLink : \"a\"}\n                to={primaryLink}\n                href={primaryLink}\n                target={isPrimaryInternal ? \"_self\" : \"_blank\"}\n                bg={'#e55424'}\n                rounded={'xl'}\n                color={'white'}\n                size=\"lg\"\n                _hover={{ bg: 'gray.900' }}>\n                {buttons[0].buttonLabel}\n              </Button>\n              {buttons[1] && (<Button\n                as={isSecondaryInternal ? GatsbyLink : \"a\"}\n                to={secondaryLink}\n                href={secondaryLink}\n                target={isSecondaryInternal ? \"_self\" : \"_blank\"}\n                rounded={'xl'}\n                variant=\"outline\"\n                color={hasImage ? 'white' : '#1a1a1a'}\n                bg={hasImage ? '' : 'white'}\n                size=\"lg\"\n                _hover={{\n                    background: 'whiteAlpha.300'\n                }}>\n                {buttons[1].buttonLabel}\n              </Button>)}\n            </Stack>\n            \n          </Stack>\n        </VStack>\n        \n      </Flex>\n    );\n  }\n\n  export default Hero","import React from \"react\"\nimport {\n    Stack,\n    Flex,\n    Button,\n    Text,\n    VStack,\n    useBreakpointValue,\n    Heading,\n    Box,\n  } from '@chakra-ui/react'\n\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport { graphql, Link as GatsbyLink } from 'gatsby'\nimport { isInternal } from \"../../utils\"\nimport slick from \"slick-carousel/slick/slick.css\"\nimport slick_theme from \"slick-carousel/slick/slick-theme.css\"\nimport Slider from \"react-slick\"\nimport \"./css/itemSlider.css\"\n\nexport const fragment = graphql`\n  fragment ItemSliderBrand on WpBrand_Pagecomponents_PageComponents_ImageGrid {\n            numberOfItemsToShow\n            sectionSubtext\n            sectionTitle\n            fieldGroupName\n            imageSection {\n              buttonLabel\n              fieldGroupName\n              link\n              subtext\n              title\n              image {\n                altText\n                localFile {\n                  childImageSharp {\n                    gatsbyImageData(layout: FULL_WIDTH, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n                  }\n                }\n              }\n            }\n  }\n`;\n\nconst ArrowStyles = (props) => {\n    const { className, style, onClick } = props;\n    return (\n        <Box\n          _before={{color: 'gray.800'}}\n          className={className}\n          style={{ ...style, display: \"block\" }}\n          onClick={onClick}\n        />\n      )\n}\nconst ItemSlider = ( data ) => {\n  const imageSections = data.imageSection\n  const title = data.sectionTitle;\n  const subtitle = data.sectionSubtext\n  const numberOfSlides = data.numberOfItemsToShow\n\n  const settings = {\n        dots: true,\n        infinite: false,\n        speed: 500,\n        slidesToShow: numberOfSlides,\n        slidesToScroll: numberOfSlides,\n        initialSlide: 0,\n        swipeToSlide: true,\n        nextArrow: <ArrowStyles />,\n        prevArrow: <ArrowStyles />,\n        slide: <Flex />,\n        responsive: [\n          {\n            breakpoint: 1024,\n            settings: {\n              slidesToShow: 3,\n              slidesToScroll: 3,\n              infinite: true,\n              dots: true\n            }\n          },\n          {\n            breakpoint: 768,\n            settings: {\n              slidesToShow: 2,\n              slidesToScroll: 2,\n              initialSlide: 2\n            }\n          },\n          {\n            breakpoint: 480,\n            settings: {\n              slidesToShow: 1,\n              slidesToScroll: 1\n            }\n          }\n        ]\n      }\n\n    \n      const h1Breakpoints = useBreakpointValue({ base: '3xl', md: '5xl', lg: '7xl' })\n      const h2Breakpoints = useBreakpointValue({ base: '2xl', md: '4xl', lg: '6xl' })\n      const h3Breakpoints = useBreakpointValue({ base: 'xl', md: '2xl', lg: '3xl' })\n      const h4Breakpoints = useBreakpointValue({ base: 'l', md: 'xl', lg: 'xl' })\n\n      console.log(imageSections) \n\n      return (\n        <Stack\n        px={'40px'}\n        py={[12,12,16,16]}\n        bgColor='gray.50'\n        textAlign=\"center\"\n        color={'gray.800'}\n        >\n          <Heading\n            as={'h2'}\n              color={'gray.800'}\n              fontWeight={700}\n              lineHeight={1.2}\n              px={'12'}\n              pb={'4'}\n              mt={'0px !important'}\n              textAlign={['left,', 'left','center','center']}\n              fontSize={h2Breakpoints}>\n              {title}\n            </Heading>\n            <Text\n              px={'12'}\n              pb={'10'}\n              mt={'0px !important'}\n              as = \"h3\"\n              color={'gray.800'}\n              fontWeight={500}\n              lineHeight={1.2}\n              textAlign={['left,', 'left','center','center']}\n              fontSize={h3Breakpoints}>\n              {subtitle}\n            </Text>\n          <Slider {...settings}>\n          { imageSections?.map( (section, i) => {\n            const link = section.link\n            const isLinkInternal = isInternal(link)\n            return(\n            <VStack className=\"test\" key={i}\n            p=\"3\"\n            height=\"100%\"\n            >\n              <Box\n              boxShadow=\"xl\"\n              rounded=\"md\"\n              bg=\"white\"\n              mx={3}\n              pb={20}\n              my={-6}\n              h=\"100%\"\n              >\n                <GatsbyImage imgStyle={{padding: '12px'}}  className=\"image\" loading=\"lazy\" image={getImage(section.image.localFile)} alt={section.image.altText} />\n                <Box\n                px={6}\n                pt={6}\n                height=\"auto !important\"\n                textAlign=\"left\">\n                  <Heading\n                  as=\"h4\"\n                  mb=\"4\"\n                  fontSize={h4Breakpoints}>{section.title}</Heading>\n                  <Text\n                  mb=\"6\"\n                  >{section.subtext}</Text>\n                  <Button\n                    as={isLinkInternal ? GatsbyLink : \"a\"}\n                    to={link}\n                    href={link}\n                    target={isLinkInternal ? \"_self\" : \"_blank\"}\n                    bg={'#e55424'}\n                    rounded={'xl'}\n                    color={'white'}\n                    size=\"lg\"\n                    _hover={{ bg: 'gray.800' }}>\n                    {section.buttonLabel}\n                  </Button>\n                </Box>\n              </Box>\n            </VStack>\n            )\n          })}\n          \n          </Slider>\n        </Stack>\n      )\n}\n\nexport default ItemSlider","import React from \"react\"\nimport {\n    Stack,\n    Flex,\n    Button,\n    Text,\n    VStack,\n    useBreakpointValue,\n    Heading,\n    Container,\n    SimpleGrid,\n    Box,\n  } from '@chakra-ui/react'\n\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport { graphql, Link as GatsbyLink } from 'gatsby'\nimport { isInternal } from \"../../utils\"\n\n\n\nexport const fragment = graphql`\n  fragment FeatureBrand on WpBrand_Pagecomponents_PageComponents_FeaturesComponent {\n    feature {\n      buttonLabel\n      buttonLink\n      featureSubtext\n      featureTitle\n      fieldGroupName\n    }\n    fieldGroupName\n    sectionTitle\n    sectionPretext\n    sectionSubtext\n    }\n`;\n\n\nconst Features = (data) => {\n  const features = data.feature\n  const h1Breakpoints = useBreakpointValue({ base: '3xl', md: '5xl', lg: '7xl' })\n  const h2Breakpoints = useBreakpointValue({ base: '2xl', md: '4xl', lg: '6xl' })\n  const h3Breakpoints = useBreakpointValue({ base: 'xl', md: '2xl', lg: '3xl' })\n  const h4Breakpoints = useBreakpointValue({ base: 'xl', md: 'xl', lg: 'xl' })\n  console.log(\"Features\",features)\nreturn(\n    <Flex px={'12'} minH={'100vh'} alignContent=\"center\" alignItems=\"center\" jus bg={'gray.800'} position={'relative'}>\n    <Flex\n      flex={1}\n      zIndex={0}\n      display={{ base: 'none', lg: 'flex' }}\n      backgroundImage=\"url('/templates/stats-grid-with-image.png')\"\n      backgroundSize={'cover'}\n      backgroundPosition=\"center\"\n      backgroundRepeat=\"no-repeat\"\n      position={'absolute'}\n      width={'50%'}\n      insetY={0}\n      right={0}>\n      <Flex\n        bgGradient={'linear(to-r, gray.800 10%, transparent)'}\n        w={'full'}\n        h={'full'}\n      />\n    </Flex>\n    <Container maxW={'7xl'} zIndex={10} position={'relative'}>\n      <Stack  direction={{ base: 'column', lg: 'row' }}>\n        <Stack\n          width=\"100%\"\n          color={'gray.400'}\n          justify={{ lg: 'center' }}\n          py={[12,12,16,16]}>\n          <Box mb={{ base: 8, md: 16 }}>\n            <Text\n              fontFamily={'heading'}\n              fontWeight={700}\n              mb={3}\n              fontSize={'xl'}\n              color={'gray.200'}>\n              {data.sectionPretext}\n            </Text>\n            <Heading\n              color={'white'}\n              mb={5}\n              fontSize={h2Breakpoints}>\n              {data.sectionTitle}\n            </Heading>\n            <Text fontSize={'xl'} color={'gray.400'}>\n            {data.sectionSubtext}\n            </Text>\n          </Box>\n\n          <SimpleGrid \n          columns={{\n            base: 1, \n            md: Object.keys(data.feature).length < 3 ? \"2\" : (Object.keys(data.feature).length%4 == 0 ? \"4\" : \"3\")}}\n          spacing={10}>\n            \n            {data.feature.map(\n              (feat) => (<Box key={feat.featureTitle}>\n                <Text\n                  fontFamily={'heading'}\n                  as=\"h3\"\n                  fontSize={h3Breakpoints}\n                  color={'gray.200'}\n                  fontWeight={'medium'}\n                  lineHeight=\"1.3\"\n                  mb={4}>\n                  {feat.featureTitle}\n                </Text>\n                <Box\n                mb={4}\n                background=\"#e55424\"\n                maxWidth={16}\n                height=\"2px\"></Box>\n                <Text as=\"div\" fontSize={'xl'} color={'gray.400'}>\n                  {(() => {\n                    console.log(\"FEATURE SBTEXT: \", feat.featureSubtext, (feat.featureSubtext))\n                    if(feat.featureSubtext){\n                      const subTexts = feat.featureSubtext.split(/\\r\\n/);\n                      return(\n                        subTexts.map((text, i) => (\n                          <StatsText key={text} index={i}>{text} </StatsText>\n                          ))\n                      )\n                    }\n                    if(feat.buttonLabel && feat.buttonLink){\n                      return(\n                        <Button\n                          as={GatsbyLink}\n                          to={feat.buttonLink}\n                          href={feat.buttonLink}\n                          bg={'#e55424'}\n                          rounded={'xl'}\n                          color={'white'}\n                          borderColor=\"#e55424\"\n                          variant={'outline'}\n                          size=\"lg\"\n                          mt={3}\n                          _hover={{ bg: 'transparent', border:\"1px solid white\" }}>\n                          {feat.buttonLabel}\n                        </Button>\n                      )\n                    }\n                    //console.log(typeof( feat.featureSubtext));\n                    \n                    })()}\n                </Text>\n              </Box>)\n            )}\n          </SimpleGrid>\n        </Stack>\n        <Flex flex={1} />\n      </Stack>\n    </Container>\n  </Flex>\n)\n}\nexport default Features\n\nconst StatsText = ({ children, index }) => {\n\n  const h4Breakpoints = useBreakpointValue({ base: 'xl', md: 'xl', lg: 'xl' })\n  return(\n    <Text as={'h4'} spacing={4} fontWeight={'medium'} fontSize={h4Breakpoints} color={'white'} >\n      {children}\n    </Text>\n)};\n  \nconst stats = [\n    {\n      title: 'Industries',\n      content: (\n        <>\n          <StatsText>Infrastructure</StatsText> | <StatsText>Recovery</StatsText>  | <StatsText>Energy</StatsText> | <StatsText>Natural Resources</StatsText>\n        </>\n      ),\n    },\n    {\n      title: 'Markets',\n      content: (\n        <>\n          <StatsText>Construction Utility</StatsText> | <StatsText>Forestry Mining Heavy</StatsText>  | <StatsText>Duty Commercial Medium</StatsText> | <StatsText>Duty Commercial Light</StatsText> | <StatsText>Duty Commercial Onshore</StatsText> | <StatsText>Offshore Government</StatsText>\n        </>\n      ),\n    },\n    {\n      title: 'Countries of Use',\n      content: (\n        <>\n          <StatsText>Global</StatsText>\n        </>\n      ),\n    },\n    {\n      title: 'Distribution Channels',\n      content: (\n        <>\n          <Button\n            as={GatsbyLink}\n            to={'/dealer-locator'}\n            href={'/dealer-locator'}\n            bg={'#e55424'}\n            rounded={'xl'}\n            color={'white'}\n            borderColor=\"#e55424\"\n            variant={'outline'}\n            size=\"lg\"\n            _hover={{ bg: 'transparent', border:\"1px solid white\" }}>\n            Find a Dealer Now\n          </Button>\n        </>\n      ),\n    },\n  ];","import React from \"react\"\nimport Layout from \"../components/Layout\"\nimport HeroSide from \"../components/brandComponents/HeroSide\"\nimport Hero from \"../components/brandComponents/Hero\"\nimport { graphql } from 'gatsby'\nimport Seo from 'gatsby-plugin-wpgraphql-seo';\nimport PostGrid from \"../components/brandComponents/PostGrid\"\nimport ItemSlider from \"../components/brandComponents/ItemSlider\"\nimport Features from \"../components/brandComponents/Features\"\n\n\nexport const pageQuery = graphql`\nquery BrandById($id: String) {\n  wpBrand(id: {eq: $id}) {\n    id\n    title\n    uri\n     pageComponents {\n      fieldGroupName\n      pageComponents {\n        __typename\n        ...HeroSide\n        ...HeroComponentBrand\n        ...ItemSliderBrand\n        ...FeatureBrand\n      }\n    }\n    seo {\n        title\n        metaDesc\n        focuskw\n        metaKeywords\n        metaRobotsNoindex\n        metaRobotsNofollow\n        opengraphTitle\n        opengraphDescription\n        opengraphImage {\n            altText\n            sourceUrl\n            srcSet\n            localFile {\n                childImageSharp {\n                    gatsbyImageData(layout: FIXED, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n                }\n            }\n        }\n        twitterTitle\n        twitterDescription\n        twitterImage {\n            altText\n            sourceUrl\n            srcSet\n            localFile {\n                childImageSharp {\n                    fixed {\n                    src\n                    }\n                }\n            }\n        }\n        canonical\n        cornerstone\n        schema {\n            articleType\n            pageType\n            raw\n        }\n    }\n  }\n  ...PostItems\n  ...NewsItems\n  ...EventItems\n}\n`;\n\n\nconst Brand = ({ data }) => {\n  const  brandComponents = data.wpBrand.pageComponents?.pageComponents;\n  \n  return (\n    <Layout>\n      <Seo post={data.wpBrand} />\n      <div>\n      { brandComponents?.map( (component, i) => {\n        const typeName = component.__typename\n        const key = data.wpBrand.id + typeName + i\n        switch (typeName) {\n          case 'WpBrand_Pagecomponents_PageComponents_HeroComponent':\n            return (component.heroType === 'full' ? <Hero key={typeName+i} {...component}/> : <HeroSide key={key} {...component}/>)\n\n          case 'WpBrand_Pagecomponents_PageComponents_ImageGrid':\n            return <ItemSlider key={typeName+i} {...component}/>\n\n          case 'WpBrand_Pagecomponents_PageComponents_FeaturesComponent':\n            return <Features key={typeName+i} {...component}/>\n  \n            default:\n              return \n        }\n      })}\n    </div>\n    </Layout>\n  )\n}\n\nexport default Brand"],"sourceRoot":""}